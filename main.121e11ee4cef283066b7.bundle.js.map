{"version":3,"file":"main.121e11ee4cef283066b7.bundle.js","sources":["webpack:///./src/utils.js"],"sourcesContent":["import * as deepmerge from 'deepmerge';\n\nexport function getHeaders(columns) {\n  const maxDepth = getDepth(columns, 'columns');\n  const result = Array.from({ length: maxDepth }).map(i => []);\n\n  function addItems(columns, depth) {\n    columns.forEach(column => {\n      const columnDef = { ...column };\n      delete columnDef.columns;\n\n      if (column.columns) {\n        const colSpan = getWidth(column, 'columns');\n        if (colSpan > 1) {\n          columnDef.colSpan = colSpan;\n        }\n        addItems(column.columns, depth + 1);\n      } else {\n        const rowSpan = maxDepth - depth;\n        if (rowSpan > 1) {\n          columnDef.rowSpan = maxDepth - depth;\n        }\n      }\n      result[depth].push(columnDef);\n    });\n  }\n  addItems(columns, 0);\n\n  return result;\n}\n\nexport function getColumns(columns) {\n  const result = [];\n\n  function setColumns(column) {\n    if (column.columns == null) {\n      result.push(column);\n      return;\n    }\n\n    column.columns.forEach(child => setColumns(child));\n  }\n  columns.forEach(column => setColumns(column));\n\n  return result;\n}\n\nexport function getDepth(arr, childProp) {\n  if (arr == null) {\n    return 0;\n  }\n\n  let depth = 0;\n  arr.forEach(item => {\n    depth = Math.max(depth, getDepth(item[childProp], childProp));\n  });\n\n  return depth + 1;\n}\n\nexport function getWidth(item, childProp) {\n  if (item[childProp] == null) {\n    return 1;\n  }\n\n  let width = 0;\n  item[childProp].forEach(child => {\n    width += getWidth(child, childProp);\n  });\n\n  return width;\n}\n\nexport function isNil(obj) {\n  return obj == null;\n}\n\nexport function merge(...objects) {\n  const [firstObj] = objects;\n  const destination = isNil(firstObj) ? {} : firstObj;\n  const existingObjects = objects.filter(source => !isNil(source));\n  const sources = [destination].concat(existingObjects);\n  \n  return deepmerge.all(sources);\n}\n"],"mappings":"AAEA","sourceRoot":""}